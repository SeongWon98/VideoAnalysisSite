<!DOCTYPE html>
<html>
<head>
  <title>Video Analysis</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/mathjs/2.0.1/math.min.js"></script>
</head>
<body>
  <ul class='nav' id='vList'>
  </ul>
  <hr>
  <div class="set_div">
    <h3>setting</h3>
    <form class="setForm" id="setForm" onsubmit="chartMaker(event)">
      <label for="cate">choose object : </label>
      <select id="cate" name="cate"></select>
      <br>
      <label for="range">choose time range : </label>
      <select id="range" name="range">
        <option value=10>10</option>
        <option value=30>30</option>
        <option value=60>60</option>
      </select>
      <br>
      <label for="counter">Counter : </label>
      <input type="checkbox" name="counter" id="counter">
      <label for="speed">Speed : </label>
      <input type="checkbox" name="speed" id="speed">
      <button type="submit" name="set">set</button>
    </form>
  </div>
  <hr>
  <div class="graph_div" id="graph_div">
  </div>

  <script>
  function getvideolist(){
    var req = new XMLHttpRequest();
    req.open('GET','/videolist', true);
    req.responseType='json';
    req.onload = ()=>{
      var ul =document.getElementById('vList');
      var videolist = req.response[0].videolist;
      videolist = videolist.toString().replaceAll('.mp4','');
      var list = videolist.split(',');
      list.forEach(function(element){
        var li = document.createElement('li');
        var a = document.createElement('a')
        a.href='/analysis/'+element;
        a.innerText=element;
        li.appendChild(a);
        ul.appendChild(li);
      });
    }
    req.send();
  }

  function addOption() {
    var req = new XMLHttpRequest();
    var path = `${window.location.pathname}`;
    path = path.replace('/analysis/','');
    req.open('GET',`/objectCategory/${path}`, true);
    req.responseType='json';
    req.onload = ()=>{
      var ul =document.getElementById('vList');
      var category = req.response[0].category;
      var selectEl = document.getElementById('cate');
      var i = 0;
      while(i < category.length){
        var objOption = document.createElement('option');
        objOption.text = category[i];
        objOption.value = category[i];
        selectEl.options.add(objOption);
        i++;
      }
    }
    req.send();
  }

  function drawChart(time, label, data, cate){
    var graphDiv = document.getElementById('graph_div');
    var graphCvs = document.createElement('canvas');
    graphCvs.height = 50;
    var chart = new Chart(graphCvs, {
      type: 'line',
      data: {
        labels: time,
        datasets: [{
          label: label,
          data: data,
          borderColor: [
            'rgba(180, 180, 255, 1)',
          ],
          borderWidth: 1,
          pointRadius: 1.5
        }]
      },
      options: {
        onClick: function(point, event){
          if(event.length == 1){
            var timesplit = time[0].split(':');
            var timerange = parseInt(timesplit[0]*60) + parseInt(timesplit[1]);
            videoPopup(timerange, event[0].index, cate);
          }
        },
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
    graphDiv.appendChild(graphCvs);
  }

  function fft(data, label, cate){
    function fft2(X) {
      var N = X.length;
      if (N <= 1) {
        return X;
      }
      var M = N/2;
      var even = [];
      var odd = [];
      even.length = M;
      odd.length = M;
      for (var i = 0; i < M; ++i) {
        even[i] = X[i*2];
        odd[i] = X[i*2+1];
      }
      even = fft2(even);
      odd = fft2(odd);
      var a = -2*math.pi;
      for (var k = 0; k < M; ++k) {
        // t = exp(-2PI*i*k/N) * X_{k+N/2} (in two steps)
        var t = math.exp(math.complex(0, a*k/N));
        t = math.multiply(t, odd[k]);
        X[k] = odd[k] = math.add(even[k], t);
        X[k+M] = even[k] = math.subtract(even[k], t);
      }
      return X;
    }
    // generate linear space from A to B with S intervals
    function linspace(A,B,S) {
      var Y = new Array(0);
      var D = (B-A)/(S-1);
      for (var i = A; i <= B; i+=D) {
        Y.push(i);
      }
      return Y;
    }

    // perhaps not necessary, but just preventing errors with mixing reals and
    // complex numbers
    function make_complex(X) {
      for (var i = 0; i < X.length; i++) {
        X[i] = math.complex(X[i],0);
      }
    }

    function calc_function(T) {
      var X = [];
      X.length = T.length;
      for (var t = 0; t < T.length; t++) {
        X[t] = math.sin(2*math.pi*T[t]);
      }
      return X;
    }

    var T = linspace(0,data.length,128);

    var X = calc_function(T);
    make_complex(X);

    var Y = fft2(X);

    // get only real part, should have a Dirac spike at sine freq
    var Yr = data;
    var time = [];
    time.length = Yr.length;
    Yr.length = Y.length;
    for (var i = 0; i < Y.length; i++) {
      Yr[i] = Y[i].re;
      time[i] = i;
    }
    var graphDiv = document.getElementById('graph_div');
    var target = document.createElement('h3');
    target.innerText = `${cate} fft`;
    graphDiv.appendChild(target);
    drawChart(time,label,Yr);
  }

  function chartMaker(){
    event.preventDefault();
    var cate = this.cate.value;
    var timerange = this.range.value;
    var speedCheck = this.speed.checked;
    var counterCheck = this.counter.checked;
    var req = new XMLHttpRequest();
    var path = `${window.location.pathname}`;
    path = path.replace('/analysis/','');
    req.open('GET',`/analysisData/${path}/cate/${cate}/timerange/${timerange}`, true);
    req.responseType='json';
    req.onload = ()=>{
      var graphDiv = document.getElementById('graph_div');
      if(counterCheck&&speedCheck){
        var target = document.createElement('h3');
        target.innerText = `${cate} info`;
        graphDiv.appendChild(target);
        var graphDiv = document.getElementById('graph_div');
        var graphCvs = document.createElement('canvas');
        graphCvs.height = 50;
        var chart = new Chart(graphCvs, {
          type: 'line',
          data: {
            labels: req.response[0].time,
            datasets: [{
              label: '수',
              data: req.response[0].count,
              borderColor: [
                'rgba(180, 180, 255, 1)',
              ],
              borderWidth: 1,
              pointRadius: 1.5
            },
            {
              label: '속도',
              data: req.response[0].speeds,
              borderColor: [
                'rgba(255, 180, 180, 1)',
              ],
              borderWidth: 1,
              pointRadius: 1.5
            }]
          },
          options: {
            onClick: function(point, event){
              if(event.length == 1){
                var timesplit = req.response[0].time[0].split(':');
                var timerange = parseInt(timesplit[0]*60) + parseInt(timesplit[1]);
                videoPopup(timerange, event[0].index, cate);
              }
            },
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
        graphDiv.appendChild(graphCvs);
      }
      else if(counterCheck){
        var label = '수';
        var target = document.createElement('h3');
        target.innerText = `${cate} counter`;
        graphDiv.appendChild(target);
        drawChart(req.response[0].time,label,req.response[0].count,cate);
        fft(req.response[0].count, label,cate);
      }
      else if(speedCheck){
        var label = '속도';
        var target = document.createElement('h3');
        target.innerText = `${cate} speeds`;
        graphDiv.appendChild(target);
        drawChart(req.response[0].time,label,req.response[0].speeds);
        console.log(req.response[0].speeds.length,cate);
        fft(req.response[0].speeds, label, cate);
        var text = document.createElement('textarea');
        text.innerText = req.response[0].speeds;
        graphDiv.appendChild(text);
      }
    }
    req.send();
  }

  addOption();
  getvideolist();

  function videoPopup(timerange, times, cate){
    var form = document.getElementById('setForm');
    var request = new XMLHttpRequest();
    var graphDiv = document.getElementById('graph_div');
    var path = `${window.location.pathname}`;
    path = path.replace('/analysis/','');
    request.open('GET',`/videopart/video/${path}/time/${times}/timerange/${timerange}`, true);
    request.onreadystatechange = function(){
      if(request.readyState == 4 && request.status==200){
        window.open(`/stream/${path}/cate/${cate}/time/${times}/timerange/${timerange}`, "a", "width=1920, height=1080, left=100, top=50");
      }
    }
    request.send();
  }
</script>
</body>
</html>
