<!DOCTYPE html>
<html>
<head>
  <title>Video Analysis</title>
  <link rel='stylesheet' href='/stylesheets/style.css' />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/mathjs/2.0.1/math.min.js"></script>
</head>
<body>
  <ul class='nav' id='vList'>
  </ul>
  <hr>
  <div class="set_player">
    <div class="set">
      <h3>setting</h3>
      <form class="setForm" id="setForm" onsubmit="postSetValue(event)">
        <label for="cate">choose object : </label>
        <select id="cate" name="cate" onChange="changeCateSelect()"></select>
        <br>
        <label for="range">set seconds : </label>
        <select id="range" name="range">
          <option value=10>10</option>
          <option value=30>30</option>
          <option value=60>60</option>
        </select>
        <br>
        <label for="counter">Counter : </label>
        <input type="checkbox" name="counter" id="counter"/>
        <label for="speed">Speed : </label>
        <input type="checkbox" name="speed" id="speed"/>
        <div class="detail" id="detail"></div>

        <button type="submit" name="set">set</button>
      </form>
    </div>
    <div class="player">
      <canvas id="canvas" width="480" height="270"></canvas>
      <br>
      <button id="play">Play</button>
      <button id="pause">Pause</button>
    </div>
  </div>

  <hr>

  <div class="graph_div" id="graph_div">
    <label for="counterExcess">counter:</label>
    <input type="text" id="counterExcess" name="counterExcess" required minlength="4" maxlength="8" size="10" onclick="clickCheckInput()">
    <label for="speedExcess">speed:</label>
    <input type="text" id="speedExcess" name="speedExcess" required minlength="4" maxlength="8" size="10" onclick="clickCheckInput()">
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <label for="fiveper">Top 5%</label>
    <input type="checkbox" id="fiveper" onclick="clickCheck(this)">
    &nbsp;&nbsp;
    <label for="tenper">Top 10%</label>
    <input type="checkbox" id="tenper" onclick="clickCheck(this)">
    &nbsp;&nbsp;
    <label for="fifper">Top 15%</label>
    <input type="checkbox" id="fifper" onclick="clickCheck(this)">
    &nbsp;&nbsp;
    <button type="button" id="apply">적용</button>
  </div>

  <script>
  var canvas=document.getElementById ("canvas");
  var context=canvas.getContext("2d");
  var img = new Image (); //이미지 객체 생성
  var imgpath = `${window.location.pathname}`;
  imgpath = imgpath.replace('/analysis','/image');
  img.src = imgpath; //code.jpg라는 이미지 파일을 로딩 시작
  img.onload = function() //이미지 로딩 완료시 실행되는 함수
  {
    context.drawImage (img,0,0,480,270);
    //(20,20)을 중심으로 100*100의 사이즈로 이미지를 그림 context. drawImage (img,20,20,100,100)
  }

  function clickCheckInput() {
    document.querySelectorAll(`input[type=checkbox]`)
    .forEach(el => el.checked = false);
  }
  function clickCheck(target) {
    document.querySelectorAll(`input[type=checkbox]`)
    .forEach(el => el.checked = false);
    target.checked = true;
    document.getElementById('counterExcess').value='';
    document.getElementById('speedExcess').value='';
  }

  function getvideolist(){
    var req = new XMLHttpRequest();
    req.open('GET','/videolist', true);
    req.responseType='json';
    req.onload = ()=>{
      var ul =document.getElementById('vList');
      var videolist = req.response[0].videolist;
      videolist = videolist.toString().replaceAll('.mp4','');
      var list = videolist.split(',');
      list.forEach(function(element){
        var li = document.createElement('li');
        var a = document.createElement('a')
        a.href='/analysis/'+element;
        a.innerText=element;
        li.appendChild(a);
        ul.appendChild(li);
      });
    }
    req.send();
  }

  function addOption() {
    var req = new XMLHttpRequest();
    var path = `${window.location.pathname}`;
    path = path.replace('/analysis/','');
    req.open('GET',`/objectCategory/${path}`, true);
    req.responseType='json';
    req.onload = ()=>{
      var ul =document.getElementById('vList');
      var category = req.response[0].category;
      var selectEl = document.getElementById('cate');
      var i = 0;
      while(i < category.length){
        var objOption = document.createElement('option');
        objOption.text = category[i];
        objOption.value = category[i];
        selectEl.options.add(objOption);
        i++;
      }
    }
    req.send();
  }
  function changeCateSelect(){
    var target = document.getElementById("cate");
    var targetValue = target.value;
    var detailDiv=document.getElementById('detail');
    var every = detailDiv.childNodes;
    var check = true;
    for(var i = 0; i < every.length; i++){
      if(every[i].tagName=='INPUT' && every[i].id == targetValue)check=false;
    }
    if(check){
      var label = document.createElement('label');
      label.for=targetValue;
      label.innerText=targetValue+'의 수 : ';
      var inputText = document.createElement('input');
      inputText.type='text';
      inputText.id=targetValue;
      inputText.name=targetValue;
      inputText.size='10';
      var br = document.createElement('br');
      detailDiv.appendChild(label);
      detailDiv.appendChild(inputText);
      detailDiv.appendChild(br);
    }
  }
  function playerClear(status){
    var canvas = document.getElementById("canvas");
    canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
    var ctx = canvas.getContext("2d");
    ctx.textAlign = 'center';
    ctx.Baseline = 'middle';
    ctx.font = "30px Arial";
    ctx.fillText(status, 240, 135);
  }
  function firstPointColor(data, pointBackgroundColors, color){
    var value = eval(`data.${data.cate[0]}_count`);
    console.log(value);
    for (var i = 0; i < value.length; i++) {
      pointBackgroundColors.pop();
    }
    for (var i = 0; i < value.length; i++) {
      pointBackgroundColors.push(color);
    }
  }
  function chartPointColor(data, pointBackgroundColors, excess, color){
    var temp = pointBackgroundColors;
    for (i = 0; i < data.length; i++) {
      if (data[i] >= excess) {
        if(pointBackgroundColors[i] == "rgba(0, 0, 0, 1)");
        else if(color=='rgba(180, 180, 255, 1)')pointBackgroundColors[i]="rgba(255, 0, 0, 1)";
        else if(color=='rgba(255, 180, 180, 1)')pointBackgroundColors[i]=("rgba(0, 0, 255, 1)");
      }else {
        if(pointBackgroundColors[i] == "rgba(0, 0, 0, 1)");
        else if(color=='rgba(180, 180, 255, 1)')pointBackgroundColors[i]="rgba(180, 180, 255, 1)";
        else if(color=='rgba(255, 180, 180, 1)')pointBackgroundColors[i]=("rgba(255, 180, 180, 1)");
      }
    }
  }
  function getSortedArr(arr, top){
    var result=[];
    for(var i in arr){
      result.push(arr[i]);
    }
    result.sort((first, second)=>{
      return second - first;
    });
    top = parseInt(arr.length*top/100);
    return result[top];
  }

  function postSetValue(){
    event.preventDefault();
    var detailDiv=document.getElementById('detail');
    var every = detailDiv.childNodes;
    var cate = [];
    var wantNum =[];
    for(var i = 0; i < every.length; i++){
      if(every[i].tagName=='INPUT'){
        cate.push(every[i].id);
        wantNum.push(every[i].value);
      }
    }
    var path = `${window.location.pathname}`;
    path = path.replace('/analysis/','');
    var data = {
      video: path,
      cate: cate,
      wantNum: wantNum,
      timerange: this.range.value,
      speedCheck: this.speed.checked,
      counterCheck: this.counter.checked
    };

    fetch('/getObjectData', {
      method: 'POST', // 또는 'PUT'
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    })
    .then((response) => response.json())
    .then((data) => {
      makingCustomChart(data);
    })
    .catch((error) => {
      console.error('실패:', error);
    });
  }

  function dataCustom(data){
    var value = eval(`data.${data.cate[0]}_count`);
    var check = Array.from({length: value.length}, () => 0);
    for (var i = 0; i < data.cate.length; i++) {
      var value2 = eval(`data.${data.cate[i]}_count`);
      for(j = 0; j < value2.length; j ++){
        if(data.wantNum[i] == value2[j]||data.wantNum[i]=='')check[j]++;
      }
    }

    for (var i = 0; i < data.cate.length; i++) {
      var value2 = eval(`data.${data.cate[i]}_count`);
      for(j = 0; j < value2.length; j ++){
        if(data.cate.length != check[j])value2[j]=0;
      }
      eval(`data.${data.cate[i]}_count = value2`);
    }
  }

  function makingCustomChart(data){
    console.log(data);
    var graphDiv = document.getElementById('graph_div');
    var graphCvs = document.createElement('canvas');
    graphCvs.height = 50;
    var cvsId=`${data.cate}`;
    cvsId=cvsId.replaceAll(',','');
    graphCvs.id=`${cvsId}Chart`;
    var chart = new Chart(graphCvs, {
      type: 'line',
      data: {
        labels: data.time,
        datasets: []
      },
      options: {
        onClick: function(point,event){
          if(event.length==1){
            playerClear('Loding...');
            var timesplit = data.time[0].split(':');
            var timerange = parseInt(timesplit[0]*60) + parseInt(timesplit[1]);
            if(data.speedCheck && data.counterCheck)var cateIdx = parseInt(event[0].datasetIndex/2);
            else var cateIdx=event[0].datasetIndex;
            videoStream(data.video, data.cate[cateIdx], data.timerange, event[0].index);
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true
        }
      }
    });
    dataCustom(data);
    var pointBackgroundColors=[];
    for(var i = 0; i < data.cate.length; i++){
      if (data.speedCheck){
        var value = eval(`data.${data.cate[i]}_speed`);
        firstPointColor(data, pointBackgroundColors, "rgba(255, 180, 180, 1)");
        var newDataset = {
          label: `${data.cate[i]} 속도`,
          borderColor: ['rgba(255, 180, 180, 1)',],
          pointBackgroundColor:pointBackgroundColors,
          data:value,
        }
        chart.data.datasets.push(newDataset);
      }
      if (data.counterCheck){
        var value = eval(`data.${data.cate[i]}_count`);
        firstPointColor(data, pointBackgroundColors, "rgba(180, 180, 255, 1)");
        var newDataset = {
          label: `${data.cate[i]} 수`,
          pointBackgroundColor:pointBackgroundColors,
          borderColor: ['rgba(180, 180, 255, 1)',],
          data:value,
        }
        chart.data.datasets.push(newDataset);
      }
    }
    document.getElementById('apply').onclick = function(){
      var dataset = chart.data.datasets;
      var rate = 0;
      if(document.getElementById('fiveper').checked)rate=5;
      else if(document.getElementById('tenper').checked)rate=10;
      else if(document.getElementById('fifper').checked)rate=15;

      for(var i = 0; i < dataset.length; i++){
        console.log(pointBackgroundColors);
        if(data.speedCheck && data.counterCheck){
          if(rate != 0){
            if(i%2==0){
              firstPointColor(data, pointBackgroundColors, "rgba(180, 180, 255, 1)");
              chartPointColor(dataset[i].data, pointBackgroundColors, getSortedArr(chart.data.datasets[0].data, 5), "rgba(180, 180, 255, 1)");
            }
            else {
              firstPointColor(dataset[i].data.length, pointBackgroundColors, "rgba(255, 180, 180, 1)");
              chartPointColor(dataset[i].data, pointBackgroundColors, getSortedArr(chart.data.datasets[1].data, 5), "rgba(255, 180, 180, 1)");
            }
          }
          else{
            firstPointColor(dataset[i].data.length, pointBackgroundColors, "rgba(180, 180, 255, 1)");
            chartPointColor(dataset[i].data, pointBackgroundColors, document.getElementById('counterExcess').value, "rgba(180, 180, 255, 1)");
            firstPointColor(dataset[i].data.length, pointBackgroundColors, "rgba(255, 180, 180, 1)");
            chartPointColor(dataset[i].data, pointBackgroundColors, document.getElementById('speedExcess').value, "rgba(255, 180, 180, 1)");
          }
        }
        else if(data.speedCheck){
          if(rate != 0){
            firstPointColor(dataset[i].data.length, pointBackgroundColors, "rgba(255, 180, 180, 1)");
            chartPointColor(dataset[i].data, pointBackgroundColors, getSortedArr(chart.data.datasets[1].data, 5), "rgba(255, 180, 180, 1)");
          }
          else{
            firstPointColor(dataset[i].data.length, pointBackgroundColors, "rgba(255, 180, 180, 1)");
            chartPointColor(dataset[i].data, pointBackgroundColors, document.getElementById('speedExcess').value, "rgba(255, 180, 180, 1)");
          }
        }
        else if(data.counterCheck){
          if(rate != 0){
            firstPointColor(data, pointBackgroundColors, "rgba(255, 180, 255, 1)");
            chartPointColor(dataset[i].data, pointBackgroundColors, getSortedArr(dataset[i].data, 5), "rgba(180, 180, 255, 1)");
          }
          else{
            firstPointColor(data, pointBackgroundColors, "rgba(255, 180, 255, 1)");
            chartPointColor(dataset[i].data, pointBackgroundColors, document.getElementById('counterExcess').value, "rgba(180, 180, 255, 1)");
          }
        }
        console.log(pointBackgroundColors);
      }

      chart.update();
    }
    graphDiv.appendChild(graphCvs);
  }

  addOption();
  getvideolist();

</script>
</body>
</html>
